/*============================================================================
==============================================================================

                              test_task.c

==============================================================================
Remarks:

       test task

============================================================================*/

/* vxWorks includes */
#include "stdio.h"
#include "math.h"
#include "string.h"
#ifndef VX
#include "strings.h"
#endif
#include "vx_headers.h"
#ifdef powerpc
#include <GLUT/glut.h>
#else
#include "GL/glut.h"
#endif

/* private includes */
#include "SL.h"
#include "SL_user.h"
#include "tasks.h"
#include "task_servo.h"
#include "kinematics.h"
#include "dynamics.h"
#include "collect_data.h"
#include "rfwr.h"
#include "shared_memory.h"
#include "SL_openGL.h"

/* defines */
#define WHICH_JCMDOFS_FILE   "JcmDOFs"

/* local variables */
static double     start_time=0;
static double     task_time;

Matrix  J_cog;    /* COG Jacobian 
		    (distinguished from "Jcog" defined in SL_user_common) */
iMatrix whichJcmDOFs;  /* matrix which defines contribution of joint motion to 
		    link CoM motion */

typedef struct My_Links{ /* Jcm */
  Matrix           Jcm;
} My_Links;

static My_Links my_links[N_DOFS+1];
static SL_Cstate my_cog[2+1];  /* tmp cog for check */
static double    time_step;

/* for sine task */
#ifndef MAX_SINE
#define MAX_SINE 4
#endif 
static double       *off;
static double      **amp;
static double      **phase;
static double      **freq;
static int          *n_sine;
static SL_DJstate   *target;
static double        task_time;
static double        speed=1.0;
static int           use_invdyn=FALSE;
static int           use_idservo=FALSE;

/* global functions */
void add_test_task(void);

/* local functions */
static int  init_test_task(void);
static int  run_test_task(void);
static int  change_test_task(void);
static int  read_whichJcmDOFs(char *keyword);
/* for sine task */
static int read_sine_script(void);

/*****************************************************************************
******************************************************************************
Function Name	: add_test_task
Date		: Feb 1999
Remarks:

adds the task to the task menu

******************************************************************************
Paramters:  (i/o = input/output)

none

*****************************************************************************/
void
add_test_task( void )

{
  int i, j;
  static int firsttime = TRUE;

  addTask("Test Task", init_test_task, 
	  run_test_task, change_test_task);


  addVarToCollect((char *)&(my_cog[1].xd[_X_]),"cog_xd_diff","m/s",DOUBLE,FALSE);
  addVarToCollect((char *)&(my_cog[1].xd[_Y_]),"cog_yd_diff","m/s",DOUBLE,FALSE);
  addVarToCollect((char *)&(my_cog[1].xd[_Z_]),"cog_zd_diff","m/s",DOUBLE,FALSE);

  addVarToCollect((char *)&(my_cog[2].xd[_X_]),"cog_xd_jac","m/s",DOUBLE,FALSE);
  addVarToCollect((char *)&(my_cog[2].xd[_Y_]),"cog_yd_jac","m/s",DOUBLE,FALSE);
  addVarToCollect((char *)&(my_cog[2].xd[_Z_]),"cog_zd_jac","m/s",DOUBLE,FALSE);

  /* initialization for sine task */
  if (firsttime) {
    firsttime = FALSE;
    off = my_vector(1,n_dofs);
    amp = my_matrix(1,n_dofs,1,MAX_SINE);
    phase = my_matrix(1,n_dofs,1,MAX_SINE);
    freq = my_matrix(1,n_dofs,1,MAX_SINE);
    n_sine = my_ivector(1,n_dofs);
    target = (SL_DJstate *)my_calloc(n_dofs+1,sizeof(SL_DJstate),MY_STOP);
  }

}    

/*****************************************************************************
******************************************************************************
  Function Name	: init_test_task
  Date		: Dec. 1997

   Remarks:

  initialization for task

******************************************************************************
  Paramters:  (i/o = input/output)

       none

 *****************************************************************************/
static int 
init_test_task(void)
{
  int    j,i;
  int    ans;
  char   string[100];
  static int firsttime = TRUE;

  if (firsttime){
    firsttime = FALSE;

    /* memory allocation for Jcm */
    for (i = 0;i <= N_DOFS;i++){ /* including BASE */
      my_links[i].Jcm  = my_matrix(1, N_CART, 1, N_DOFS);
    }

    /* memory allocation for J_cog and whichJcmDOFs */
    J_cog        = my_matrix(1, N_CART, 1, N_DOFS);
    whichJcmDOFs = my_imatrix(0, N_DOFS, 1, N_DOFS);
  }

  /* read whichJcmDOFs file */
  for (i=0; i<=N_DOFS; ++i){ /* including BASE */
    sprintf(string,"%s_cm",joint_names[i]);
    read_whichJcmDOFs(string);
  }

  /* print_mat whichJcmDOFs * (print_mat cannot be used since index
                               starts from zero                    */
  printf("Matrix >whichJcmDOFs< :\n");

  for (i=0; i<=N_DOFS; ++i) { // including BASE
      printf("          ");
      for (j=1; j<=N_DOFS; ++j) {
	printf("% d ",whichJcmDOFs[i][j]);
      }
      printf("\n");
  }
  printf("\n");


  time_step = 1./(double)task_servo_rate;

  /* check whether any other task is running */
  if (strcmp(current_task_name,NO_TASK) != 0) {
    printf("New task can only be run if no other task is running!\n");
    return FALSE;
  }

  /***************** sine task *******************/

  /* allow or speed adjustment */
  get_double("Frequency Multiplier",speed,&speed);

  /* enable inverse dynamics control */
  get_int("Use local invdyn?",use_invdyn,&use_invdyn);

  /* read the script for this task */
  if (!read_sine_script())
    return FALSE;

  /* go to a save posture */
  bzero((char *)&(target[1]),n_dofs*sizeof(target[1]));
  for (i=1; i<=n_dofs; ++i) {
    target[i].th  = off[i];
    for (j=1; j<=n_sine[i]; ++j) {
      target[i].th  += amp[i][j]*sin(phase[i][j]);
    }
  }

  if (!go_target_wait_ID(target))
    return FALSE;

  /* switch the servo mode */
  if (use_idservo)
    setServoMode(INVDYNSERVO);
  else
    setServoMode(MOTORSERVO);

  /* start task */

  ans = 999;
  while (ans == 999) {
    if (!get_int("Enter 1 to start or anthing else to abort ...",ans,&ans))
      return FALSE;
  }

  if (ans != 1) 
    return FALSE;


  task_time = 0.0;
  start_time = task_servo_time;

  scd();

  return TRUE;

}

/*****************************************************************************
******************************************************************************
  Function Name	: run_test_task
  Date		: Dec. 1997

  Remarks:

  run the task from the task servo: REAL TIME requirements!

******************************************************************************
  Paramters:  (i/o = input/output)

  none

 *****************************************************************************/
static int 
run_test_task(void)
{
  int i, j, k;
  static  Matrix   p;
  static  Matrix   z;
  static  Matrix mcm;
  static  Matrix  cm;
  static  int    firsttime = TRUE;
  double  mass;
  static  Matrix sum_mJcm;
  static  Vector last_cog;
  static  double last_t;

  /* initialization of static variables */
  if (firsttime){
    firsttime = FALSE;
    p   = my_matrix(0, N_DOFS, 1, N_CART); /* including BASE */
    z   = my_matrix(0, N_DOFS, 1, N_CART); /* including BASE */
    mcm = my_matrix(0, N_DOFS, 1, N_CART); /* including BASE */
     cm = my_matrix(0, N_DOFS, 1, N_CART); /* including BASE */
    sum_mJcm = my_matrix(1, N_CART, 1, N_DOFS);
    last_cog = my_vector(1, N_CART);
  }

  task_time += 1./(double)task_servo_rate;

  /************ sine task ****************/


  for (i=1; i<=n_dofs; ++i) {
    joint_des_state[i].th  = off[i];
    joint_des_state[i].thd = 0.0;
    joint_des_state[i].thdd = 0.0;
    for (j=1; j<=n_sine[i]; ++j) {
      joint_des_state[i].th += 
	amp[i][j] * sin(2.*PI*speed*freq[i][j]*task_time+phase[i][j]);
      joint_des_state[i].thd += amp[i][j] * 2.*PI*speed*freq[i][j] * 
	cos(2.*PI*speed*freq[i][j]*task_time+phase[i][j]);
      joint_des_state[i].thdd += -amp[i][j] * sqr(2.*PI*speed*freq[i][j]) * 
	sin(2.*PI*speed*freq[i][j]*task_time+phase[i][j]);
    }
  }

  if (!use_idservo && use_invdyn)
    SL_InverseDynamics(joint_state,joint_des_state,endeff);


  /***************** COG Jacobian computation *****************/

  /* set tmp variables */
  for(i=0;i<=N_DOFS;i++){ /* including BASE */
    for(j=1;j<=N_CART;j++){ 
      p[i][j]   = joint_origin_pos[i][j];
      z[i][j]   = joint_axis_pos[i][j];
      mcm[i][j] = joint_cog_mpos[i][j];

      if (links[i].m != 0){ /* check m is not zero */
	cm[i][j]  = mcm[i][j]/links[i].m; 
      }
      else {
	freeze();
	return FALSE;
      }
    }
  }


  /* compute Jcm for i-th link */
  for(i=0;i<=N_DOFS;i++){ /* including BASE */
    for(j=1;j<=N_DOFS;j++){ 
      if (whichJcmDOFs[i][j] != 0){
	// compute j-th column of Jcm given by z[j] x (cm[i] - p[j]) 
	my_links[i].Jcm[_X_][j] =  (z[j][_Y_]*(cm[i][_Z_] - p[j][_Z_]) 
	                         - z[j][_Z_]*(cm[i][_Y_] - p[j][_Y_]))*whichJcmDOFs[i][j];

	my_links[i].Jcm[_Y_][j] =  (z[j][_Z_]*(cm[i][_X_] - p[j][_X_]) 
                       	         - z[j][_X_]*(cm[i][_Z_] - p[j][_Z_]))*whichJcmDOFs[i][j];

	my_links[i].Jcm[_Z_][j] =  (z[j][_X_]*(cm[i][_Y_] - p[j][_Y_]) 
	                         - z[j][_Y_]*(cm[i][_X_] - p[j][_X_]))*whichJcmDOFs[i][j];
      }
      else { //zero j-th colum for DOF which does not contribute to the movement of cm[i] 
	my_links[i].Jcm[_X_][j] = 0.0;
	my_links[i].Jcm[_Y_][j] = 0.0;
	my_links[i].Jcm[_Z_][j] = 0.0;
      }
    }
  } 

  /*** compute J_cog ***/

  mass = links[BASE].m; /* compute total mass */
  for (i=1;i<=N_DOFS;i++){ 
    mass += links[i].m; 
  }

  /* compute sum(mJcm[i]) */
  mat_zero(sum_mJcm); 
  for(i=0;i<=N_DOFS;i++){  /* including BASE */
    for(j=1;j<=N_CART;j++){
      for(k=1;k<=N_DOFS;k++){
	sum_mJcm[j][k] += links[i].m * my_links[i].Jcm[j][k];
      }
    }
  }

  if (mass != 0) { /* check if mass is not zero */
    mat_zero(J_cog);
    for(i=1;i<=N_CART;i++){
      for(j=1;j<=N_DOFS;j++){
	J_cog[i][j] = sum_mJcm[i][j]/mass;
      }
    }
  }
  else{
    freeze();
    return FALSE;
  }

  /* print_mat("J_cog", J_cog); */

  /* compute d(cog)/dt with numerical differentiation */
  /* first check whether last_thd is valid */
  if (  fabs(task_servo_time - (last_t + time_step)) > time_step/10.0 ) {

    /* this will set the time derivatives to zero at this step */
    for (i=1;i<=N_CART;++i){
      last_cog[i] = cog.x[i];
      }

#ifndef VX
    printf("zeroed\n");
#endif
  }

  for (i=1; i<=N_CART; ++i){  /* numerical differentiation of cog.x */
    my_cog[1].xd[i] = (cog.x[i]-last_cog[i])/time_step;

    /* save the previous states for numerical cog diff. */
    last_cog[i] = cog.x[i];
  }

  last_t = task_servo_time;

  /* compute J_cog*q_dot */
  for (i=1;i<=N_CART;i++){
    my_cog[2].xd[i] = 0.0;
    for (j=1;j<=N_DOFS;j++){
	my_cog[2].xd[i] += J_cog[i][j] * joint_state[j].thd;
    }
  }

  return TRUE;

}

/*****************************************************************************
******************************************************************************
  Function Name	: change_test_task
  Date		: Dec. 1997

  Remarks:

  changes the task parameters

******************************************************************************
  Paramters:  (i/o = input/output)

  none

 *****************************************************************************/
static int 
change_test_task(void)
{
  int j, i;
  return TRUE;

}


/*****************************************************************************
******************************************************************************
Function Name	: read_whichJcmDOFs
Date		: May 2005
Remarks:

parses the whichJcmDOFs definition file into static global variables given a
keyword

******************************************************************************
Paramters:  (i/o = input/output)

  keyword (i): which parameter set to use

*****************************************************************************/
static int
read_whichJcmDOFs(char *keyword) {

  int j, i, n;
  char   string[100];
  FILE  *in;
  double dum;
  int    count = 0;
  int    ind   = 999;  /* link ID */
  int    sign  = 1;

  for (i=0; i<=N_DOFS; ++i) { /* including BASE */
    sprintf(string,"%s_cm",joint_names[i]);
    if (strcmp(keyword, string) == 0) {
      ind = i;
      break;
    }
  }

  /* for debuggin */
  if (ind==999) {
    printf("ERROR in file >%s< with joint_cm name!\n", WHICH_JCMDOFS_FILE);
  }

  /* read the link parameters */
  sprintf(string,"%s%s",PREFS,WHICH_JCMDOFS_FILE);
  in = fopen(string,"r");
  if (in == NULL) {
    printf("ERROR: Cannot open file >%s<!\n",string);
    return FALSE;
  }

  /* find the appropriate data set from the keyword */
  if (!find_keyword(in, keyword)) {
      printf("ERROR: Cannot find keyword >%s< in >%s<!\n",
	     keyword,WHICH_JCMDOFS_FILE);
      return FALSE;
  }


  /* read all following strings and determine which DOF they are concerned with */
  for (i=1; i<=N_DOFS; ++i){ 
    whichJcmDOFs[ind][i] = FALSE;
  }

  for (i=1; i<= N_DOFS; ++i) {
    sign = 1;
    fscanf(in,"%s",string);
    if (string[0] == '+')
      sprintf(string,"%s",&string[1]);
    else if (string[0] == '-') {
      sign = -1;
      sprintf(string,"%s",&string[1]);
    }
    for (j=1; j<=N_DOFS; ++j) {
      if (strcmp(string,joint_names[j]) == 0) {
	whichJcmDOFs[ind][j] = sign;
	++count;
	break;
      }
    }
    /* if we did not find a joint name -> break */

    if (j == N_DOFS+1) 
      break;
  }

  /*  printf("Found %d DOFs for whichJcmDOFs %s array\n",count, keyword); */

  fclose(in);

  return TRUE;

}


/*****************************************************************************
******************************************************************************
  Function Name	: read_sine_script
  Date		: June 1999

  Remarks:

  parse a script which describes the sine task

******************************************************************************
  Paramters:  (i/o = input/output)

  none

 *****************************************************************************/
static int 
read_sine_script(void)
{
  int j, i;
  static char string[100];
  /* static char fname[100] = "default.sine"; */
  static char fname[100] = "test.sine";
  FILE *fp;
  int found = FALSE;
  double total_amp;
  double ratio;

  /* clear the current parameters */
  for (i=1; i<=n_dofs; ++i) {
    off[i] = joint_default_state[i].th;
    n_sine[i] = 0;
    for (j=1; j<=MAX_SINE; ++j) {
      amp[i][j] = phase[i][j] = freq[i][j] = 0.0;
    }
  }

  /* open the script, and parse the parameters */

  while (TRUE) {
    if (!get_string("Name of the Sine Script File\0",fname,fname)) 
      return FALSE;

    /* try to read this file */
    sprintf(string,"%s%s",PREFS,fname);
    fp = fopen_strip(string);
    if (fp != NULL)
      break;
  }

  for (i=1; i<= n_dofs; ++i) {
    if (find_keyword(fp, &(joint_names[i][0]))) {
      found = TRUE;
      total_amp = 0.0;
      fscanf(fp,"%d %lf",&n_sine[i],&off[i]);
      /* check for out of range */
      if (off[i] > joint_range[i][MAX_THETA]) {
	off[i] = joint_range[i][MAX_THETA];
	printf("Reduced offset of joint %s to %f\n",joint_names[i],off[i]);
      }
      if (off[i] < joint_range[i][MIN_THETA]) {
	off[i] = joint_range[i][MIN_THETA];
	printf("Reduced offset of joint %s to %f\n",joint_names[i],off[i]);
      }
      for (j=1; j<=n_sine[i]; ++j) {
	fscanf(fp,"%lf %lf %lf",&(amp[i][j]),&(phase[i][j]),&(freq[i][j]));
	total_amp += amp[i][j];
      }
      /* check for out of range */
      if (total_amp+off[i] > joint_range[i][MAX_THETA]) {
	ratio = total_amp/(joint_range[i][MAX_THETA]-off[i]+1.e-10);
	for (j=1; j<=n_sine[i]; ++j)
	  amp[i][j] /= ratio;
	printf("Reduced amplitude of joint %s to %f\n",joint_names[i],
	       amp[i][j]);
      }
      if (-total_amp+off[i] < joint_range[i][MIN_THETA]) {
	ratio = total_amp/(off[i]-joint_range[i][MIN_THETA]+1.e-10);
	for (j=1; j<=n_sine[i]; ++j)
	  amp[i][j] /= ratio;
	printf("Reduced amplitude of joint %s to %f\n",joint_names[i],
	       amp[i][j]);
      }
    }
  }

  fclose(fp);
  remove_temp_file();


  return found;

}
