/*============================================================================
==============================================================================
                      
                              test_sine_task.c
 
==============================================================================
Remarks:

      task for CS545 to program a honey sphere on the robot

============================================================================*/

/* vxWorks includes */

#include "stdio.h"
#include "math.h"
#include "string.h"
#ifndef VX
#include "strings.h"
#endif
#include "vx_headers.h"

/* private includes */
#include "SL.h"
#include "SL_user.h"
#include "SL_common.h"
#include "utility.h"
#include "tasks.h"
#include "task_servo.h"
#include "collect_data.h"
#include "dynamics.h"

/* local variables */

#define MAX_SINE 4
static double       *off;
static double      **amp;
static double      **phase;
static double      **freq;
static int          *n_sine;
static SL_DJstate   *target;
static double        task_time;
static double        speed=1.0;
static int           invdyn_servo_flag=0;
static double        mult = 1.0; // must be smaller than 1, otherwise unstable
static int           which_invdyn = 2;


/* global variables */

/* global functions */
void add_test_sine_task(void);

/* local functions */
static int init_test_sine_task(void);
static int run_test_sine_task(void);
static int change_test_sine_task(void);
static int read_sine_script(void);

void test_constraint(void);


/* external functiosn */
extern void 
SL_InverseDynamicsArt(SL_Jstate *cstate, SL_DJstate *lstate, SL_Cstate *cbase,
		      SL_quat *obase, SL_uext *ux, SL_endeff *leff);

 
/*****************************************************************************
******************************************************************************
Function Name	: add_test_sine_task
Date		: Feb 1999
Remarks:

adds the task to the task menu

******************************************************************************
Paramters:  (i/o = input/output)

none

*****************************************************************************/
void
add_test_sine_task( void )

{
  int i, j;
  static int firsttime = TRUE;
  char string[100];
  
  if (firsttime) {
    firsttime = FALSE;
    off = my_vector(1,n_dofs);
    amp = my_matrix(1,n_dofs,1,MAX_SINE);
    phase = my_matrix(1,n_dofs,1,MAX_SINE);
    freq = my_matrix(1,n_dofs,1,MAX_SINE);
    n_sine = my_ivector(1,n_dofs);
    target = (SL_DJstate *)my_calloc(n_dofs+1,sizeof(SL_DJstate),MY_STOP);
    
    addTask("Test Sine Task", init_test_sine_task,run_test_sine_task, change_test_sine_task);

    for (i=1; i<=N_DOFS; ++i) {
      sprintf(string,"%s_tar_th",joint_names[i]);
      addVarToCollect((char *)&(target[i].th),string,"rad", DOUBLE,FALSE);
      sprintf(string,"%s_tar_thd",joint_names[i]);
      addVarToCollect((char *)&(target[i].thd),string,"rad/s", DOUBLE,FALSE);
      sprintf(string,"%s_tar_thdd",joint_names[i]);
      addVarToCollect((char *)&(target[i].thdd),string,"rad/s^2", DOUBLE,FALSE);
    }

    updateDataCollectScript();
    
  }
  
}    

/*****************************************************************************
******************************************************************************
  Function Name	: init_test_sine_task
  Date		: Dec. 1997

  Remarks:

  initialization for task

******************************************************************************
  Paramters:  (i/o = input/output)

       none

 *****************************************************************************/
static int 
init_test_sine_task(void)
{
  int j, i;
  char string[100];
  double max_range=0;
  int ans;

  /* check whether any other task is running */
  if (strcmp(current_task_name,NO_TASK) != 0) {
    printf("New task can only be run if no other task is running!\n");
    return FALSE;
  }

  /* allow or speed adjustment */
  get_double("Frequency Multiplier",speed,&speed);

  /* enable inverse dynamics control */
  get_int("Which InvDyn: NewtonEuler=1 ArtBody=2",which_invdyn,&which_invdyn);

  /* read the script for this task */
  if (!read_sine_script())
    return FALSE;

  /* go to a save posture */
  bzero((char *)&(target[1]),n_dofs*sizeof(target[1]));
  for (i=1; i<=n_dofs; ++i) {
    target[i].th  = off[i];
    for (j=1; j<=n_sine[i]; ++j) {
      target[i].th  += amp[i][j]*sin(phase[i][j]);
    }
  }

  if (!go_target_wait_ID(target))
    return FALSE;

  /* switch the servo mode */
  if (invdyn_servo_flag)
    setServoMode(INVDYNSERVO);
  else
    setServoMode(MOTORSERVO);

  /* do we really want to do this task? */
  ans = 999;
  while (ans == 999) {
    if (!get_int("Enter 1 to start or anthing else to abort ...",ans,&ans))
      return FALSE;
  }
  
  if (ans != 1) 
    return FALSE;

  task_time = 0.0;
  scd();

  return TRUE;

}

/*****************************************************************************
******************************************************************************
  Function Name	: run_test_sine_task
  Date		: Dec. 1997

  Remarks:

  run the task from the task servo: REAL TIME requirements!

******************************************************************************
  Paramters:  (i/o = input/output)

  none

 *****************************************************************************/
static int 
run_test_sine_task(void)
{
  int j, i;
  double gain = 100;

  task_time += 1./(double)task_servo_rate;

  for (i=1; i<=n_dofs; ++i) {
    joint_des_state[i].th  = off[i];
    joint_des_state[i].thd = 0.0;
    joint_des_state[i].thdd = 0.0;
    for (j=1; j<=n_sine[i]; ++j) {
      joint_des_state[i].th += 
	amp[i][j] * sin(2.*PI*speed*freq[i][j]*task_time+phase[i][j]);
      joint_des_state[i].thd += amp[i][j] * 2.*PI*speed*freq[i][j] * 
	cos(2.*PI*speed*freq[i][j]*task_time+phase[i][j]);
      joint_des_state[i].thdd += -amp[i][j] * sqr(2.*PI*speed*freq[i][j]) * 
	sin(2.*PI*speed*freq[i][j]*task_time+phase[i][j]);
    }

    // store these in another variable for mrdplot
    target[i].th = joint_des_state[i].th;
    target[i].thd = joint_des_state[i].thd;
    target[i].thdd = joint_des_state[i].thdd;

    if (1) {
      // hack
      joint_des_state[i].thdd += gain*(joint_des_state[i].th-joint_state[i].th) +
	2.*sqrt(gain)*(joint_des_state[i].thd-joint_state[i].thd);
    }

  }

  if (!invdyn_servo_flag) {

    // here this function overwrites the sensor readings
    test_constraint();

    bzero((void *)uext,sizeof(SL_uext)*(n_dofs+1));

    uext[L_AAA].f[_X_] = misc_sensor[L_CFx] * mult;
    uext[L_AAA].f[_Y_] = misc_sensor[L_CFy] * mult;
    uext[L_AAA].f[_Z_] = misc_sensor[L_CFz] * mult;

    uext[L_AAA].t[_A_] = misc_sensor[L_CTa] * mult;
    uext[L_AAA].t[_B_] = misc_sensor[L_CTb] * mult;
    uext[L_AAA].t[_G_] = misc_sensor[L_CTg] * mult;
    
    uext[R_AAA].f[_X_] = misc_sensor[R_CFx] * mult;
    uext[R_AAA].f[_Y_] = misc_sensor[R_CFy] * mult;
    uext[R_AAA].f[_Z_] = misc_sensor[R_CFz] * mult;

    uext[R_AAA].t[_A_] = misc_sensor[R_CTa] * mult;
    uext[R_AAA].t[_B_] = misc_sensor[R_CTb] * mult;
    uext[R_AAA].t[_G_] = misc_sensor[R_CTg] * mult;
    
    if (which_invdyn == 1)
      SL_InverseDynamics(joint_state,joint_des_state,endeff);
    else
      SL_InverseDynamicsArt(joint_state,joint_des_state, 
			    &base_state,&base_orient, 
			    uext, endeff);
  }


  //if (task_servo_calls%5000 == 0)
  //test_constraint();


  if (1) {
    for (i=1; i<=N_DOFS; ++i) {
      joint_des_state[i].th  = joint_state[i].th;
      joint_des_state[i].thd = joint_state[i].thd;
    }
  }

  return TRUE;

}

/*****************************************************************************
******************************************************************************
  Function Name	: change_test_sine_task
  Date		: Dec. 1997

  Remarks:

  changes the task parameters

******************************************************************************
  Paramters:  (i/o = input/output)

  none

 *****************************************************************************/
static int 
change_test_sine_task(void)
{
  int j, i;
  char string[100];
  extern double *controller_gain_th;
  extern double *controller_gain_thd;

  get_double("Force feedback multiplier",mult,&mult);

  // quick hack to reduce gains
  for (i=L_HFE; i<=R_AAA; ++i) {
    controller_gain_th[i] /= 2.0;
    controller_gain_thd[i] /= sqrt(2.0);
  }


  return TRUE;

}

/*****************************************************************************
******************************************************************************
  Function Name	: read_sine_script
  Date		: June 1999

  Remarks:

  parse a script which describes the sine task

******************************************************************************
  Paramters:  (i/o = input/output)

  none

 *****************************************************************************/
static int 
read_sine_script(void)
{
  int j, i;
  static char string[100];
  static char fname[100] = "default.sine";
  FILE *fp;
  int found = FALSE;
  double total_amp;
  double ratio;

  /* clear the current parameters */
  for (i=1; i<=n_dofs; ++i) {
    off[i] = joint_default_state[i].th;
    n_sine[i] = 0;
    for (j=1; j<=MAX_SINE; ++j) {
      amp[i][j] = phase[i][j] = freq[i][j] = 0.0;
    }
  }

  /* open the script, and parse the parameters */

  while (TRUE) {
    if (!get_string("Name of the Sine Script File\0",fname,fname)) 
      return FALSE;
    
    /* try to read this file */
    sprintf(string,"%s%s",PREFS,fname);
    fp = fopen_strip(string);
    if (fp != NULL)
      break;
  }

  for (i=1; i<= n_dofs; ++i) {
    if (find_keyword(fp, &(joint_names[i][0]))) {
      found = TRUE;
      total_amp = 0.0;
      fscanf(fp,"%d %lf",&n_sine[i],&off[i]);
      /* check for out of range */
      if (off[i] > joint_range[i][MAX_THETA]) {
	off[i] = joint_range[i][MAX_THETA];
	printf("Reduced offset of joint %s to %f\n",joint_names[i],off[i]);
      }
      if (off[i] < joint_range[i][MIN_THETA]) {
	off[i] = joint_range[i][MIN_THETA];
	printf("Reduced offset of joint %s to %f\n",joint_names[i],off[i]);
      }
      for (j=1; j<=n_sine[i]; ++j) {
	fscanf(fp,"%lf %lf %lf",&(amp[i][j]),&(phase[i][j]),&(freq[i][j]));
	total_amp += amp[i][j];
      }
      /* check for out of range */
      if (total_amp+off[i] > joint_range[i][MAX_THETA]) {
	ratio = total_amp/(joint_range[i][MAX_THETA]-off[i]+1.e-10);
	for (j=1; j<=n_sine[i]; ++j)
	  amp[i][j] /= ratio;
	printf("Reduced amplitude of joint %s to %f\n",joint_names[i],
	       amp[i][j]);
      }
      if (-total_amp+off[i] < joint_range[i][MIN_THETA]) {
	ratio = total_amp/(off[i]-joint_range[i][MIN_THETA]+1.e-10);
	for (j=1; j<=n_sine[i]; ++j)
	  amp[i][j] /= ratio;
	printf("Reduced amplitude of joint %s to %f\n",joint_names[i],
	       amp[i][j]);
      }
    }
  }
  
  fclose(fp);
  remove_temp_file();


  return found;

}


void
test_constraint(void)
{
  int i,j,n,m;
  static Matrix Jbig;
  static Matrix dJbigdt;
  static Vector dsbigdt;
  static Matrix JbigMinvJbigt;
  static Matrix JbigMinvJbigtinv;
  static Matrix Minv;
  static Matrix MinvJbigt;
  static Matrix Jbigt;
  static Vector dJbigdtdsbigdt;
  static Matrix Jbart;
  static Matrix Jbar;
  static Vector lv;
  static Vector lambda;
  static Vector f;
  static Matrix R;
  static Vector v;
  static int firsttime = TRUE;
  SL_Corient w;
  int    debug_print = FALSE;

  if (firsttime) {
    firsttime = FALSE;
    Jbig             = my_matrix(1,N_ENDEFFS*6,1,N_DOFS+6);
    Jbigt            = my_matrix(1,N_DOFS+6,1,N_ENDEFFS*6);
    dJbigdt          = my_matrix(1,N_ENDEFFS*6,1,N_DOFS+6);
    JbigMinvJbigt    = my_matrix(1,N_ENDEFFS*6,1,N_ENDEFFS*6);
    JbigMinvJbigtinv = my_matrix(1,N_ENDEFFS*6,1,N_ENDEFFS*6);
    Minv             = my_matrix(1,N_DOFS+6,1,N_DOFS+6);
    MinvJbigt        = my_matrix(1,N_DOFS+6,1,N_ENDEFFS*6);
    dsbigdt          = my_vector(1,N_DOFS+6);
    dJbigdtdsbigdt   = my_vector(1,N_ENDEFFS*6);
    Jbar             = my_matrix(1,N_DOFS+6,1,N_ENDEFFS*6);
    Jbart            = my_matrix(1,N_ENDEFFS*6,1,N_DOFS+6);
    lv               = my_vector(1,N_ENDEFFS*6);
    lambda           = my_vector(1,N_ENDEFFS*6);
    f                = my_vector(1,N_DOFS+6);
    R                = my_matrix(1,N_CART,1,N_CART);
    v                = my_vector(1,N_CART);

    // the base part of Jbig is just the identity matrix for both constraints
    for (i=1; i<=6; ++i)
      Jbig[i][N_DOFS+i] = 1.0;

    for (i=1; i<=6; ++i)
      Jbig[i+6][N_DOFS+i] = 1.0;

  }

  // build the Jacobian including the base -- just copy J into Jbig
  mat_equal_size(J,N_ENDEFFS*6,N_DOFS,Jbig);
  mat_trans(Jbig,Jbigt);

  // build the Jacobian derivative
  mat_equal_size(dJdt,N_ENDEFFS*6,N_DOFS,dJbigdt);

  // build the augmented state derivate vector
  for (i=1; i<=N_DOFS; ++i)
    dsbigdt[i] = joint_state[i].thd;

  for (i=1; i<=N_CART; ++i)
    dsbigdt[N_DOFS+i] = base_state.xd[i];

  quatToAngularVelocity(&base_orient, &w);

  for (i=1; i<=N_CART; ++i)
    dsbigdt[N_DOFS+N_CART+i] = w.ad[i];


  // compute J-bar transpose
  my_inv_ludcmp(rbdInertiaMatrix,N_DOFS+6, Minv);
  mat_mult(Minv,Jbigt,MinvJbigt);
  mat_mult(Jbig,MinvJbigt,JbigMinvJbigt);
  my_inv_ludcmp(JbigMinvJbigt,N_ENDEFFS*6,JbigMinvJbigtinv);
  mat_mult(MinvJbigt,JbigMinvJbigtinv,Jbar);
  mat_trans(Jbar,Jbart);

  // compute C+G-u
  for (i=1; i<=N_DOFS; ++i)
    f[i] = -joint_state[i].u;
  
  for (i=1; i<=6; ++i)
    f[N_DOFS+i] = 0.0;

  vec_add(f,rbdCplusGVector,f);

  // compute first part of lambda
  mat_vec_mult(Jbart,f,lambda);

  // compute second part of lambda
  mat_vec_mult(dJbigdt,dsbigdt,dJbigdtdsbigdt);
  mat_vec_mult(JbigMinvJbigtinv,dJbigdtdsbigdt,lv);

  // compute final lambda
  vec_sub(lambda,lv,lambda);

  // ----------------------------------------------------------------------
  // express lambda in the same coordinate at the foot sensors

  /* rotation matrix from world to L_AAA coordinates:
     we can borrow this matrix from the toes, which have the same
     rotation, but just a different offset vector, which is not
     needed here */

  mat_trans_size(Alink[L_IN_HEEL],N_CART,N_CART,R);

  // transform forces
  for (i=1; i<=N_CART; ++i)
    v[i] = lambda[N_CART*2+i];
  mat_vec_mult(R,v,v);

  if (debug_print) {
    printf("LEFT Force: lx=% 7.5f   sx=% 7.5f\n",v[1],misc_sim_sensor[L_CFx]);
    printf("LEFT Force: ly=% 7.5f   sy=% 7.5f\n",v[2],misc_sim_sensor[L_CFy]);
    printf("LEFT Force: lz=% 7.5f   sz=% 7.5f\n",v[3],misc_sim_sensor[L_CFz]);
  }

  misc_sensor[L_CFx] = v[1];
  misc_sensor[L_CFy] = v[2];
  misc_sensor[L_CFz] = v[3];

  // transform torques
  for (i=1; i<=N_CART; ++i)
    v[i] = lambda[N_CART*2+N_CART+i];
  mat_vec_mult(R,v,v);

  if (debug_print) {
    printf("LEFT Torque: lx=% 7.5f   sx=% 7.5f\n",v[1],misc_sim_sensor[L_CTa]);
    printf("LEFT Torque: ly=% 7.5f   sy=% 7.5f\n",v[2],misc_sim_sensor[L_CTb]);
    printf("LEFT Torque: lz=% 7.5f   sz=% 7.5f\n",v[3],misc_sim_sensor[L_CTg]);
  }

  misc_sensor[L_CTa] = v[1];
  misc_sensor[L_CTb] = v[2];
  misc_sensor[L_CTg] = v[3];

  /* rotation matrix from world to R_AAA coordinates :
     we can borrow this matrix from the toes, which have the same
     rotation, but just a different offset vector, which is not
     needed here */
  mat_trans_size(Alink[R_IN_HEEL],N_CART,N_CART,R);

  // transform forces
  for (i=1; i<=N_CART; ++i)
    v[i] = lambda[i];
  mat_vec_mult(R,v,v);

  if (debug_print) {
    printf("RIGHT Force: lx=% 7.5f   sx=% 7.5f\n",v[1],misc_sim_sensor[R_CFx]);
    printf("RIGHT Force: ly=% 7.5f   sy=% 7.5f\n",v[2],misc_sim_sensor[R_CFy]);
    printf("RIGHT Force: lz=% 7.5f   sz=% 7.5f\n",v[3],misc_sim_sensor[R_CFz]);
  }
    
  misc_sensor[R_CFx] = v[1];
  misc_sensor[R_CFy] = v[2];
  misc_sensor[R_CFz] = v[3];

  // transform torques
  for (i=1; i<=N_CART; ++i)
    v[i] = lambda[N_CART+i];
  mat_vec_mult(R,v,v);

  if (debug_print) {
    printf("RIGHT Torque: lx=% 7.5f   sx=% 7.5f\n",v[1],misc_sim_sensor[R_CTa]);
    printf("RIGHT Torque: ly=% 7.5f   sy=% 7.5f\n",v[2],misc_sim_sensor[R_CTb]);
    printf("RIGHT Torque: lz=% 7.5f   sz=% 7.5f\n",v[3],misc_sim_sensor[R_CTg]);
  }

  misc_sensor[R_CTa] = v[1];
  misc_sensor[R_CTb] = v[2];
  misc_sensor[R_CTg] = v[3];

  //getchar();
  
}

